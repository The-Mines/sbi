name: Build and Push Wolfi Base Image

permissions:
  contents: read
  packages: write
  id-token: write # Needed for keyless signing with cosign
  security-events: write
  issues: write

on:
  schedule:
    # Runs at 8:00 AM Eastern (13:00 UTC) on Monday and Thursday
    - cron: '0 13 * * 1,4'
  
  workflow_dispatch:
    inputs:
      push:
        description: 'Push to registry'
        required: false
        type: boolean
        default: true

env:
  REGISTRY: ghcr.io
  ORG: the-mines/sbi
  IMAGE_NAME: wolfi

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    name: Build Wolfi Base Image
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase repository name
        id: repo
        run: |
          echo "owner_repo=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Generate short SHA
        id: sha
        run: echo "short_sha=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Setup crane
        uses: imjasonh/setup-crane@v0.3

      - name: Log in to GitHub Container Registry
        if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.push)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.repo.outputs.owner_repo }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.sha.outputs.short_sha }}
            type=schedule,pattern={{date 'YYYYMMDD'}}
          labels: |
            org.opencontainers.image.title=wolfi-base
            org.opencontainers.image.vendor=The Mines
            org.opencontainers.image.description=Wolfi base image
            org.opencontainers.image.source=https://github.com/The-Mines/sbi

      - name: Build multi-arch images with apko
        id: build
        run: |
          cd containers/wolfi-base
          
          # Build for each architecture separately
          echo "üî® Building Wolfi base image for amd64..."
          docker run --rm -v "${PWD}":/work cgr.dev/chainguard/apko:latest \
            build wolfi-direct.apko.yaml wolfi:latest wolfi-amd64.tar \
            --arch x86_64 \
            --sbom --sbom-formats spdx
          
          echo "üî® Building Wolfi base image for arm64..."
          docker run --rm -v "${PWD}":/work cgr.dev/chainguard/apko:latest \
            build wolfi-direct.apko.yaml wolfi:latest wolfi-arm64.tar \
            --arch aarch64 \
            --sbom --sbom-formats spdx
          
          # Load images into Docker
          echo "üì¶ Loading images into Docker..."
          docker load < wolfi-amd64.tar
          
          # List loaded images to see what was actually loaded
          echo "üìã Loaded images:"
          docker images | grep wolfi
          
          # Tag the amd64 image
          docker tag wolfi:latest-amd64 ${{ env.REGISTRY }}/${{ steps.repo.outputs.owner_repo }}/${{ env.IMAGE_NAME }}:amd64
          
          # Load arm64 and tag
          docker load < wolfi-arm64.tar
          docker tag wolfi:latest-arm64 ${{ env.REGISTRY }}/${{ steps.repo.outputs.owner_repo }}/${{ env.IMAGE_NAME }}:arm64

      - name: Push images and create manifest
        if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.push)
        run: |
          # Push architecture-specific images
          echo "üì§ Pushing architecture-specific images..."
          docker push ${{ env.REGISTRY }}/${{ steps.repo.outputs.owner_repo }}/${{ env.IMAGE_NAME }}:amd64
          docker push ${{ env.REGISTRY }}/${{ steps.repo.outputs.owner_repo }}/${{ env.IMAGE_NAME }}:arm64
          
          # Create and push multi-arch manifests for each tag
          echo "üì¶ Creating multi-arch manifests..."
          for tag in ${{ steps.meta.outputs.tags }}; do
            # Extract just the tag name from the full image reference
            TAG_NAME=$(echo "$tag" | sed "s|${{ env.REGISTRY }}/${{ steps.repo.outputs.owner_repo }}/${{ env.IMAGE_NAME }}:||")
            echo "Creating manifest for tag: $TAG_NAME"
            
            docker manifest create "$tag" \
              --amend "${{ env.REGISTRY }}/${{ steps.repo.outputs.owner_repo }}/${{ env.IMAGE_NAME }}:amd64" \
              --amend "${{ env.REGISTRY }}/${{ steps.repo.outputs.owner_repo }}/${{ env.IMAGE_NAME }}:arm64"
            
            docker manifest push "$tag"
          done
          
          # Get the digest of the latest tag
          DIGEST=$(crane digest "${{ env.REGISTRY }}/${{ steps.repo.outputs.owner_repo }}/${{ env.IMAGE_NAME }}:latest")
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
          echo "image=${{ env.REGISTRY }}/${{ steps.repo.outputs.owner_repo }}/${{ env.IMAGE_NAME }}@${DIGEST}" >> $GITHUB_OUTPUT

      - name: Sign container image with cosign
        if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.push)
        run: |
          echo "üîè Signing container image..."
          
          # Sign the multi-arch image by digest
          cosign sign --yes \
            "${{ env.REGISTRY }}/${{ steps.repo.outputs.owner_repo }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}"
          
          echo "‚úÖ Image signed successfully"

      - name: Generate SLSA provenance attestation
        if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.push)
        run: |
          echo "üìã Generating SLSA provenance..."
          
          # Create provenance attestation
          cosign attest --yes \
            --predicate-type slsaprovenance \
            --predicate <(echo '{
              "buildType": "https://github.com/chainguard-dev/apko",
              "builder": {
                "id": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              },
              "invocation": {
                "configSource": {
                  "uri": "https://github.com/${{ github.repository }}",
                  "digest": {
                    "sha1": "${{ github.sha }}"
                  }
                }
              }
            }') \
            "${{ env.REGISTRY }}/${{ steps.repo.outputs.owner_repo }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}"

      - name: Run Trivy vulnerability scanner
        if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.push)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ steps.repo.outputs.owner_repo }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: 'table'
          output: 'trivy-results.txt'
          severity: 'CRITICAL,HIGH'
          exit-code: '0' # Don't fail the build on vulnerabilities

      - name: Upload Trivy scan results
        if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.push)
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results-wolfi-base
          path: trivy-results.txt

      - name: Extract Trivy summary and check for critical vulnerabilities
        if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.push)
        id: trivy
        run: |
          if [ -f "trivy-results.txt" ]; then
            SUMMARY=$(grep -E 'Total: [0-9]+' trivy-results.txt | head -1 || echo 'No vulnerabilities detected')
            echo "summary=${SUMMARY}" >> $GITHUB_OUTPUT
            
            # Check if there are any CRITICAL vulnerabilities
            CRITICAL_COUNT=$(grep -E 'CRITICAL: [0-9]+' trivy-results.txt | grep -oE '[0-9]+' | head -1 || echo "0")
            HIGH_COUNT=$(grep -E 'HIGH: [0-9]+' trivy-results.txt | grep -oE '[0-9]+' | head -1 || echo "0")
            
            echo "critical_count=${CRITICAL_COUNT}" >> $GITHUB_OUTPUT
            echo "high_count=${HIGH_COUNT}" >> $GITHUB_OUTPUT
            
            if [ "${CRITICAL_COUNT}" -gt "0" ]; then
              echo "has_critical_vulns=true" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è WARNING: Image contains ${CRITICAL_COUNT} CRITICAL vulnerabilities"
            else
              echo "has_critical_vulns=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "summary=Scan not performed" >> $GITHUB_OUTPUT
            echo "has_critical_vulns=false" >> $GITHUB_OUTPUT
            echo "critical_count=0" >> $GITHUB_OUTPUT
            echo "high_count=0" >> $GITHUB_OUTPUT
          fi

      - name: Verify image signature
        if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.push)
        run: |
          echo "üîç Verifying image signature..."
          
          # Verify the signature using keyless verification
          cosign verify \
            --certificate-identity-regexp "https://github.com/${{ github.repository }}/.github/workflows/base-image-build-and-push.yaml@.*" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            "${{ env.REGISTRY }}/${{ steps.repo.outputs.owner_repo }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}" | jq .

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-wolfi-base
          path: |
            containers/wolfi-base/*.spdx.json

      - name: Create build summary
        if: always()
        run: |
          echo "# üì¶ Wolfi Base Image Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Date:** $(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "## ‚úÖ Build Successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üè∑Ô∏è Image Tags" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | while read tag; do
              echo "- \`$tag\`" >> $GITHUB_STEP_SUMMARY
            done
            echo "" >> $GITHUB_STEP_SUMMARY
            if [ -n "${{ steps.build.outputs.digest }}" ]; then
              echo "### üîê Image Digest" >> $GITHUB_STEP_SUMMARY
              echo "\`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            echo "### üõ°Ô∏è Security" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Image signed with cosign" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ SLSA provenance attestation generated" >> $GITHUB_STEP_SUMMARY
            if [ -n "${{ steps.trivy.outputs.summary }}" ]; then
              echo "- üìã Trivy scan: ${{ steps.trivy.outputs.summary }}" >> $GITHUB_STEP_SUMMARY
              if [ "${{ steps.trivy.outputs.has_critical_vulns }}" == "true" ]; then
                echo "- ‚ö†Ô∏è **WARNING: Image contains ${{ steps.trivy.outputs.critical_count }} CRITICAL and ${{ steps.trivy.outputs.high_count }} HIGH vulnerabilities**" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          else
            echo "## ‚ùå Build Failed" >> $GITHUB_STEP_SUMMARY
            echo "Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Send Slack notification for critical vulnerabilities
        if: steps.trivy.outputs.has_critical_vulns == 'true' && vars.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "‚ö†Ô∏è Critical Vulnerabilities Found in Wolfi Base Image",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "üö® Security Alert: Critical Vulnerabilities Detected",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Critical Vulnerabilities:* ${{ steps.trivy.outputs.critical_count }}\n*High Vulnerabilities:* ${{ steps.trivy.outputs.high_count }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Image:* `${{ env.REGISTRY }}/${{ steps.repo.outputs.owner_repo }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}`\n*Note:* The image has been published despite vulnerabilities. Please review and remediate urgently."
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Security Report",
                        "emoji": true
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Wolfi base image build failure',
              body: `The scheduled build for Wolfi base image has failed.
              
              **Workflow Run:** [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              **Commit:** ${{ github.sha }}
              **Triggered by:** ${{ github.event_name }}
              
              Please investigate and fix the build failure.`,
              labels: ['bug', 'ci/cd', 'wolfi']
            })