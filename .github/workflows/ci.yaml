name: Build PR and Main

permissions:
  contents: write
  pull-requests: write
  issues: write
  statuses: write
  packages: write

on:
  pull_request:
    paths:
      - 'containers/**'
  push:
    paths:
      - 'containers/**'
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to use'
        required: true
        default: 'main'
      deploy:
        description: 'Deploy images to GHCR'
        required: false
        default: 'false'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app:
          - name: spellcarver-python311
            dockerfile: ./containers/python311/Dockerfile
            context: ./containers/python311/
            env: dev
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate tags
        id: meta
        run: |
          # Generate short SHA
          SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

          # Set the full image name
          IMAGE_NAME="ghcr.io/the-mines/spellcarver-base-images/${{ matrix.app.name }}"

          # Generate tags based on event type
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "tags=${IMAGE_NAME}:latest,${IMAGE_NAME}:${{ matrix.app.env }}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          else
            echo "tags=${IMAGE_NAME}:${{ matrix.app.env }}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.app.context }}
          file: ${{ matrix.app.dockerfile }}
          push: ${{ github.event_name == 'push' || github.event.inputs.deploy == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max