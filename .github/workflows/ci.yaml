name: Build SBI Container Images

permissions:
  contents: write
  pull-requests: write
  issues: write
  statuses: write
  packages: write
  id-token: write # Needed for keyless signing

on:
  pull_request:
    paths:
      - 'containers/**'
      - '.github/workflows/ci.yaml'
  push:
    branches:
      - main
    paths:
      - 'containers/**'
      - '.github/workflows/ci.yaml'
  schedule:
    # Runs at 09:00 UTC (9am) every Friday
    - cron: '0 9 * * 5'
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy images to GHCR'
        required: false
        type: boolean
        default: false

# Define reusable variables
env:
  REGISTRY: ghcr.io
  ORG: the-mines/sbi
  PLATFORMS: linux/amd64
  PUSH_CONDITION: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.deploy) }}

# Define a reusable job template for building images
jobs:
  # Job to determine which images to build
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      short_sha: ${{ steps.set-sha.outputs.short_sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate short SHA
        id: set-sha
        run: echo "short_sha=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

      - name: Set build matrix
        id: set-matrix
        run: |
          echo "matrix={\"include\":[
            {\"name\":\"python311\",\"dockerfile\":\"./containers/python311/Dockerfile\",\"context\":\"./containers/python311/\",\"env\":\"dev\"},
            {\"name\":\"cassandra\",\"dockerfile\":\"./containers/cassandra/Dockerfile\",\"context\":\"./containers/cassandra/\",\"env\":\"dev\"},
            {\"name\":\"node22\",\"dockerfile\":\"./containers/node/node22/Dockerfile.node22\",\"context\":\"./containers/node/node22/\",\"env\":\"latest\"},
            {\"name\":\"node22-dev\",\"dockerfile\":\"./containers/node/node22/Dockerfile.node22-dev\",\"context\":\"./containers/node/node22/\",\"env\":\"dev\"}
          ]}" >> $GITHUB_OUTPUT

  # Build and push job
  build-images:
    needs: prepare
    runs-on: ubuntu-latest
    continue-on-error: true  # Allow individual image builds to fail without affecting others
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
      fail-fast: false  # Don't cancel other jobs if one fails

    name: Build ${{ matrix.name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Log in to GitHub Container Registry
        if: env.PUSH_CONDITION == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.ORG }}/${{ matrix.name }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ matrix.env }}-${{ needs.prepare.outputs.short_sha }}
            type=schedule,pattern={{date 'YYYYMMDD'}}
          labels: |
            org.opencontainers.image.title=${{ matrix.name }}
            org.opencontainers.image.vendor=The Mines
            org.opencontainers.image.description=Spellcarver Base Image for ${{ matrix.name }}
            org.opencontainers.image.source=https://github.com/The-Mines/sbi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: ${{ env.PUSH_CONDITION }}
          tags: ${{ steps.meta.outputs.tags }}
          platforms: ${{ env.PLATFORMS }}
          cache-from: type=gha,scope=${{ matrix.name }}
          cache-to: type=gha,scope=${{ matrix.name }},mode=max
          labels: ${{ steps.meta.outputs.labels }}
          provenance: mode=max
          sbom: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.ORG }}/${{ matrix.name }}:${{ matrix.env }}-${{ needs.prepare.outputs.short_sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        if: env.PUSH_CONDITION == 'true'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        if: env.PUSH_CONDITION == 'true'

  # Summary job that runs after all builds
  summary:
    needs: [prepare, build-images]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create build summary
        run: |
          echo "## Spellcarver Base Images Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "Build completed at $(date)" >> $GITHUB_STEP_SUMMARY
          echo "Commit: [${GITHUB_SHA}](https://github.com/${{ github.repository }}/commit/${GITHUB_SHA})" >> $GITHUB_STEP_SUMMARY
          echo "Short SHA: ${{ needs.prepare.outputs.short_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "Event: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "Images have been pushed: ${{ env.PUSH_CONDITION }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "Pull Request: [#${{ github.event.pull_request.number }}](${{ github.event.pull_request.html_url }})" >> $GITHUB_STEP_SUMMARY
          fi

          echo "### Image Status" >> $GITHUB_STEP_SUMMARY
          echo "| Image | Status |" >> $GITHUB_STEP_SUMMARY
          echo "| ----- | ------ |" >> $GITHUB_STEP_SUMMARY

          matrix='${{ toJson(fromJson(needs.prepare.outputs.matrix).include) }}'
          count=$(echo "$matrix" | jq '. | length')

          for (( i=0; i<$count; i++ )); do
            name=$(echo "$matrix" | jq -r ".[$i].name")
            job_status="${{ needs.build-images.result }}"
            if [ "$job_status" == "success" ]; then
              echo "| $name | ✅ Success |" >> $GITHUB_STEP_SUMMARY
            elif [ "$job_status" == "failure" ]; then
              echo "| $name | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $name | ⚠️ Unknown |" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: Notify on failure
        if: needs.build-images.result != 'success' && github.event_name != 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Container build failure in workflow run #${{ github.run_number }}',
              body: 'The container build workflow has failed. [Check the workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.'
            })