name: Build SBI Container Images

permissions:
  contents: write
  pull-requests: write
  issues: write
  statuses: write
  packages: write
  id-token: write # Needed for keyless signing
  security-events: write

on:
  pull_request:
    paths:
      - 'containers/**'
      - '.github/workflows/ci.yaml'
  push:
    branches:
      - main
    paths:
      - 'containers/**'
      - '.github/workflows/ci.yaml'
  schedule:
    - cron: '0 9 * * 5' # Runs every Friday at 09:00 UTC
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy images to GHCR'
        required: false
        type: boolean
        default: false

# Environment Variables
env:
  REGISTRY: ghcr.io
  ORG: the-mines/sbi
  PLATFORMS: linux/amd64
  PUSH_CONDITION: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.deploy) }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      short_sha: ${{ steps.set-sha.outputs.short_sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate short SHA
        id: set-sha
        run: echo "short_sha=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

      - name: Set build matrix
        id: set-matrix
        run: |
          echo 'matrix={"include":[{"name":"python311","dockerfile":"./containers/python311/Dockerfile","context":"./containers/python311/","env":"dev"},{"name":"cassandra","dockerfile":"./containers/cassandra/Dockerfile","context":"./containers/cassandra/","env":"dev"},{"name":"node22","dockerfile":"./containers/node/node22/Dockerfile.node22","context":"./containers/node/node22/","env":"latest"},{"name":"node22-dev","dockerfile":"./containers/node/node22/Dockerfile.node22-dev","context":"./containers/node/node22/","env":"dev"},{"name":"node23","dockerfile":"./containers/node/node23/Dockerfile.node23","context":"./containers/node/node23/","env":"latest"},{"name":"node23-dev","dockerfile":"./containers/node/node23/Dockerfile.node23-dev","context":"./containers/node/node23/","env":"dev"}]}' >> $GITHUB_OUTPUT

  build-images:
    needs: prepare
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
      fail-fast: false
    name: Build ${{ matrix.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Log in to GitHub Container Registry
        if: env.PUSH_CONDITION == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.ORG }}/${{ matrix.name }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ matrix.env }}-${{ needs.prepare.outputs.short_sha }}
            type=schedule,pattern={{date 'YYYYMMDD'}}
          labels: |
            org.opencontainers.image.title=${{ matrix.name }}
            org.opencontainers.image.vendor=The Mines
            org.opencontainers.image.description=Spellcarver Base Image for ${{ matrix.name }}
            org.opencontainers.image.source=https://github.com/The-Mines/sbi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: ${{ matrix.context }}
          format: 'table'
          output: 'trivy-results.txt'
          severity: 'CRITICAL,HIGH'
        if: env.PUSH_CONDITION == 'true'

      - name: Upload Trivy scan results as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results-${{ matrix.name }}
          path: trivy-results.txt
        if: env.PUSH_CONDITION == 'true'

      - name: Extract Trivy summary for metadata
        run: |
          if [ -f "trivy-results.txt" ]; then
            SUMMARY=$(grep -E 'Total: [0-9]+' trivy-results.txt | head -1 || echo 'No vulnerabilities detected')
            echo "TRIVY_SUMMARY=${SUMMARY}" >> $GITHUB_ENV
          else
            echo "TRIVY_SUMMARY=Scan not performed" >> $GITHUB_ENV
          fi
        if: env.PUSH_CONDITION == 'true'

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: ${{ env.PUSH_CONDITION }}
          tags: ${{ steps.meta.outputs.tags }}
          platforms: ${{ env.PLATFORMS }}
          cache-from: type=gha,scope=${{ matrix.name }}
          cache-to: type=gha,scope=${{ matrix.name }},mode=max
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.security.trivy-summary=${{ env.TRIVY_SUMMARY }}
          provenance: mode=max
          sbom: true

      # Record individual build status for slack notification
      - name: Record build status
        if: always()
        run: |
          mkdir -p ./build-status
          echo "${{ job.status }}" > ./build-status/${{ matrix.name }}.status

      # Upload build status as artifact
      - name: Upload build status
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-status-${{ matrix.name }}
          path: ./build-status/${{ matrix.name }}.status
          retention-days: 1

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Container build failure: ${{ matrix.name }}',
              body: 'The build for `${{ matrix.name }}` has failed. [Check workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.'
            })

  summary:
    needs: [prepare, build-images]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download build status artifacts
        uses: actions/download-artifact@v4
        with:
          path: build-status-artifacts
          pattern: build-status-*
          merge-multiple: true

      - name: Create build summary
        run: |
          echo "## Spellcarver Base Images Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "Build completed at $(date)" >> $GITHUB_STEP_SUMMARY
          echo "Commit: [${GITHUB_SHA}](https://github.com/${{ github.repository }}/commit/${GITHUB_SHA})" >> $GITHUB_STEP_SUMMARY
          echo "Short SHA: ${{ needs.prepare.outputs.short_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "### Image Status" >> $GITHUB_STEP_SUMMARY
          echo "| Image | Status |" >> $GITHUB_STEP_SUMMARY
          echo "| ----- | ------ |" >> $GITHUB_STEP_SUMMARY

          MATRIX='${{ needs.prepare.outputs.matrix }}'
          echo "$MATRIX" | jq -c '.include[]' | while read -r item; do
            NAME=$(echo "$item" | jq -r '.name')
            if [ -f "build-status-artifacts/${NAME}.status" ]; then
              STATUS=$(cat "build-status-artifacts/${NAME}.status")
            else
              STATUS="unknown"
            fi
            echo "| $NAME | $STATUS |" >> $GITHUB_STEP_SUMMARY
          done

  slack-notification:
    needs: [prepare, build-images, summary]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build status artifacts
        uses: actions/download-artifact@v4
        with:
          path: build-status-artifacts
          pattern: build-status-*
          merge-multiple: true

      - name: Create Slack notification JSON
        run: |
          # Generate a temporary file with all build statuses
          echo "## Build Status Summary" > build_status.txt

          MATRIX='${{ needs.prepare.outputs.matrix }}'
          echo "$MATRIX" | jq -c '.include[]' | while read -r item; do
            NAME=$(echo "$item" | jq -r '.name')
            if [ -f "build-status-artifacts/${NAME}.status" ]; then
              STATUS=$(cat "build-status-artifacts/${NAME}.status")
            else
              STATUS="unknown"
            fi

            if [ "$STATUS" == "success" ]; then
              echo "✅ *${NAME}*: ${STATUS}" >> build_status.txt
            elif [ "$STATUS" == "failure" ]; then
              echo "❌ *${NAME}*: ${STATUS}" >> build_status.txt
            elif [ "$STATUS" == "cancelled" ]; then
              echo "⚠️ *${NAME}*: ${STATUS}" >> build_status.txt
            else
              echo "❓ *${NAME}*: ${STATUS}" >> build_status.txt
            fi
          done

          # Get the content as escaped JSON string
          BUILD_STATUS=$(cat build_status.txt | jq -Rs '.')
          BUILD_DATE=$(date '+%Y-%m-%d %H:%M:%S UTC' | jq -Rs '.')
          REPO_INFO=$(echo "*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Build Date:* $(date '+%Y-%m-%d %H:%M:%S UTC')" | jq -Rs '.')

          # Create the JSON payload directly using jq
          jq -n \
            --arg text "📦 Spellcarver Base Images Build Summary" \
            --arg repo_info "$REPO_INFO" \
            --arg build_status "$BUILD_STATUS" \
            --arg workflow_url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            '{
              "text": $text,
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "📦 Spellcarver Base Images Build Summary",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": $repo_info
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Build Results:*\n"+$build_status
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow Run",
                        "emoji": true
                      },
                      "url": $workflow_url
                    }
                  ]
                }
              ]
            }' > slack_payload.json

          # Validate the final JSON
          jq empty slack_payload.json || { echo "Invalid JSON"; exit 1; }
          echo "JSON payload created and validated successfully:"
          cat slack_payload.json

      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload-file-path: slack_payload.json
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
